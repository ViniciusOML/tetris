# -*- coding: utf-8 -*-
"""Tetris - Classificador LGPD

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l91BCT4JUOGt2P56mmayZ7R0BhG5Sq9L

#Desenvolvedores:
 - Vinicius de Oliveira Mendes Lima
 - Deivid Valença de Araujo
 - Roger William Belas Cruz
 - Gustavo Luiz Silva Lima
 - Lucas Ricardo Ribeiro Souza

# 1 - Importar depêndencias
"""

!pip install unidecode
!python -m spacy download pt


#pd.set_option('display.max_colwidth', -1)

import pandas as pd
import unidecode as unidecode
import nltk as nltk
import string
import sklearn
from nltk import tokenize
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import Normalizer
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectKBest, mutual_info_classif, chi2, f_classif
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
import numpy as np

from numpy import random

nltk.download('rslp')
nltk.download('stopwords')

"""# Montar o Dataframe
 - Carregar os arquivo em excel com os textos de LGPD e não lgpd
 - Classificar LGPD = 1 e Não LGPD  = 0
 - Concatenar ambos os carregamentos 
"""

uri_data_lgpd ='https://github.com/ViniciusOML/tetris/blob/main/termos_lgpd.xlsx?raw=true'
df_lgpd = pd.read_excel (uri_data_lgpd)
df_lgpd['CLASSE'] = 1

uri_data_nao_lgpd = 'https://github.com/ViniciusOML/tetris/blob/main/termos_nao_lgpd.xlsx?raw=true'
df_nao_lgpd = pd.read_excel(uri_data_nao_lgpd)
df_nao_lgpd['CLASSE'] = 0

#concatena as duas bases em uma variável e deixa a ordenação delas aleatória
df = pd.concat([df_lgpd, df_nao_lgpd], axis=0, ignore_index=True)
df = shuffle(df)

"""# 2 - Converte cada campo da planilha em uma variável"""

pd.set_option('display.max_colwidth', 1)
termos = df['TERMO'].fillna("") # Lê a coluna TERMO e passa para a variável termos
y = df['CLASSE']	# Lê a coluna CLASSE do dataframe e passa para a variável y

termos[:10]

"""# Pre-processamento

 - remoção de caput (textos que tem função de cabeçalhos no meio jurídico)
 - remoção de stop words
 - Tokenização


"""

import string 
   
def remove_caput(text):
        
    words = text.split()
    
    sem_caput = []
    for w in words:
        if not w.isupper():
            sem_caput.append(w)
    
    result = ''
    for w in sem_caput:
        result = result + w + ' '
    return result

dispositivos = termos.apply(lambda x: remove_caput(x)) #verbetação + dispositivo
dispositivos.head(1)

df['DISPOSITIVOS'] = dispositivos

df['DISPOSITIVOS'].head(3)

def remover_stopwords(tokenizador, textos):
  stop_words = nltk.corpus.stopwords.words("portuguese")
  termos_processados = list()
  for termos in textos:
    novos_termos = list()
    print(termos)
    palavras_termos = tokenizador.tokenize(termos)
    print(palavras_termos)
    for palavra in palavras_termos:
      if palavra.lower() not in stop_words:        
        novos_termos.append(palavra)
    termos_processados.append(' '.join(novos_termos))
  return termos_processados

dispostivos_proc = [unidecode.unidecode(texto.lower()) for texto in df["DISPOSITIVOS"]]
df["DISPOSITIVOS_PROC"] = dispostivos_proc

stemmer = nltk.RSLPStemmer()
punct_tokenize = tokenize.WordPunctTokenizer()

df['DISPOSITIVOS_PROC'] = remover_stopwords(punct_tokenize, df["DISPOSITIVOS_PROC"])

"""# Geração do bag of words

 - Conjunto das palavras mantendo a frequência.
"""

count_vectorizer = CountVectorizer()

bag_of_words = count_vectorizer.fit_transform(df['DISPOSITIVOS_PROC'])

"""# Quebrando o conjunto de treino e teste"""

#Rodar este trecho para alterar a aleatoriedade da amostra

# Definindo tamanho da amostra que será usada para 80% treino e 20% teste 
X_treino, X_teste, y_treino, y_teste = train_test_split(bag_of_words,
                                                              df.CLASSE,
                                                              test_size=0.2, 
                                                              random_state = 605123483)

"""# Modelos

"""

#MultinomialNB

from sklearn.naive_bayes import MultinomialNB

nb = MultinomialNB()

#lr = LogisticRegression(solver='lbfgs')
lr = LogisticRegression(solver='liblinear', multi_class='auto',verbose=0) #escolhido solver = liblinear pois segunda a docuemntação essa configuração é a melhor para dataset pequeno

models = [nb,lr]
names = ['NB','Logistic Regression']

"""# Classificação """

from sklearn.metrics import accuracy_score, recall_score,precision_score,f1_score

def executa_algoritmos(X_treino, y_treino, X_teste, y_teste, bag_of_words, models):
  
  for model in models:
    
    print(model)
    model.fit(X_treino,y_treino)
    print(" Score : ", model.score(X_treino,y_treino))
    y_pred_class =  model.predict(X_teste)
    print(" Accuracy: ", accuracy_score(y_teste, y_pred_class))    
    print(" Precision : ",precision_score(y_teste, y_pred_class, average='macro'))

    target_names = ['ADERENTE', 'NAO ADERENTE']

    print(classification_report(y_teste, y_pred_class, target_names=target_names))
    print("----------------------------------------------------------------------")

  seed = None
  
  # prepare models
  models = []
  models.append(('Naive Bayes.', nb))
  models.append(('Regressão Logistica', lr))

executa_algoritmos(X_treino, y_treino, X_teste, y_teste, bag_of_words, models)

"""# Matriz de confusão"""

import itertools  
from sklearn.metrics import confusion_matrix

class_names = ['ADERENTE', 'NAO ADERENTE']

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='MATRIZ DE CONFUSÃO',
                          cmap=plt.cm.Blues):
 
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Matriz de confusão Normalizada")
    else:
        print('Matriz de confusão não normalizada')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('Verdadeiro')
    plt.xlabel('Predição')

for model in models:

    y_pred = model.predict(X_teste)    
    
    print(str(model)+'_modelo')
    # Compute confusion matrix
    cnf_matrix = confusion_matrix(y_teste, y_pred)
    np.set_printoptions(precision=2)

    # Plot matriz não normalizada
    plt.figure()
    plot_confusion_matrix(cnf_matrix, classes=class_names,
                          title='Matriz de confusão não normalizada')

    #Plot matriz nomalizada
    #plt.figure()
    #plot_confusion_matrix(cnf_matrix, classes=class_names, normalize=False,
                         #title='Matriz de confusão Normalizada')

    plt.show()
